#!/bin/bash
# shellcheck disable=SC2155

# See https://github.com/openstax/setup-scripts for details on this file

if [[ $0 != "-bash" ]]; then
  cd "$(dirname "$0")/.." || exit 111
fi

# Set the LOG_LEVEL to "info" if it is not set
if [[ ! "${LOG_LEVEL}" ]]; then
  if [[ "${DEBUG}" ]]; then
    echo "(deprecated) use LOG_LEVEL='debug' rather than DEBUG=true to enable debugging"
    LOG_LEVEL="debug"
  else
    LOG_LEVEL="info"
  fi
fi

# Turn on tracing if desired
if [[ ${LOG_LEVEL} == "trace" ]]; then
  export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '
  set -x
fi

# https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
if [[ $(tput colors) -ge 8 ]]; then
  declare -x c_red=$(tput setaf 1)
  declare -x c_green=$(tput setaf 2)
  declare -x c_blue=$(tput setaf 4)
  declare -x c_purple=$(tput setaf 5)
  declare -x c_dark=$(tput setaf 8)
  declare -x c_yellow=$(tput setaf 11)
  declare -x c_cyan=$(tput setaf 14)
  declare -x c_none=$(tput sgr0) # Keep this last so TRACE=true does not cause everything to be cyan
fi

_say() { echo -e "$1"; }
progress() { _say "${c_yellow}==>${c_none} $1"; }
# https://stackoverflow.com/a/25515370
yell() { >&2 _say "$0: ${c_red}$*${c_none}"; }
die() {
  yell "$1"
  # shellcheck disable=SC2086
  exit ${2:-112} # Use the 2nd arg or 112 as the default
}
try() { __NESTED_PROGRESS__="true" "$@" || die "${c_red}ERROR: could not run [$*]${c_none}" 112; }

do_progress() { progress "$1"; try "${@:2}"; }

# Alternative that outputs only when an error occurs
_quiet_progress() { echo -e -n "${c_yellow}==>${c_none} $1 ${c_dark}...${c_none} "; }
_quiet_try() {
  SECONDS=0
  _myout=$(mktemp -t 'bootstrap_stdout_XXXXXX')
  _myerr=$(mktemp -t 'bootstrap_stderr_XXXXXX')
  __NESTED_PROGRESS__="true" "$@" > "${_myout}" 2> "${_myerr}" || {
    echo "" # start on a new line
    cat "${_myout}"
    >&2 cat "${_myerr}"
    rm "${_myout}" "${_myerr}"
    die "${c_red}ERROR: could not run [$*]${c_none}"
  }
  rm "${_myout}" "${_myerr}"
}
_quiet_ok() {
  time_spent=""
  if [[ ${SECONDS} -gt 5 ]]; then
    time_spent=" ${c_dark}(${SECONDS} sec)${c_none}"
  fi
  _say "${c_green}OK${c_none}${time_spent}";
}
do_progress_quiet() {
  # Keep it loud when running in Travis or Jenkins
  if [[ "${LOG_LEVEL}" == "trace" || "${LOG_LEVEL}" == "debug" || "${__NESTED_PROGRESS__}" == "true" ]]; then
    do_progress "$@"
  else
    _quiet_progress "$1"
    _quiet_try "${@:2}" # Skip the 1st arg but use the rest
    _quiet_ok
  fi
}

# This provides a > 10% speedup because we do not have to reinitialize node and ruby
if [[ ! ${BOOTSTRAP_ALREADY_RAN} ]]; then

  # Install homebrew packages if running on macOS
  if [[ -f "Brewfile" ]] && [[ "$(uname -s)" = "Darwin" ]]; then
    [[ $(which brew) ]] || die "Install Homebrew by going to https://brew.sh"
    [[ $(xcode-select --print-path) == "/Library/Developer/CommandLineTools" ]] || _say "${c_red}WARNING:${c_none} You may need to uninstall XCode and just install the command line tools"

    brew bundle check >/dev/null 2>&1  || {
      do_progress_quiet "Installing Homebrew dependencies" \
        brew bundle
    }
  fi

  # Python: Install & Activate python virtualenv
  if [[ ! "${CI}" = "true" ]] && [[ -f "./setup.py" || -f "./requirements.txt" ]]; then
    # Only install & activate the virtualenv if not already in one
    if [[ -z "${VIRTUAL_ENV}" ]]; then

      # Check that a .python-version file is set
      [[ -f "./.python-version" ]] || die "Repository is missing a .python-version file. Please add one. The contents should contain the python version (ie 2.7)"

      virtualenv_dir="./venv/"
      python_version="$(< .python-version)"
      virtualenv_command="virtualenv"

      # macOS needs a little extra love
      if [[ "$(uname -s)" = "Darwin" ]]; then
        # Install the correct python version if it is not installed yet
        if [[ ! $(pyenv which python) ]]; then
          do_progress_quiet "Installing Python ${python_version} (using pyenv)" \
            pyenv install "${python_version}"
        fi
        # Ensure pyenv is initialized
        eval "$(pyenv init -)"

        virtualenv_command="pyenv exec virtualenv"
      fi

      # Install pip if it is not available
      if [[ ! $(which pip) ]]; then
        pwd=$(pwd)
        do_progress_quiet "Downloading pip" \
          curl --output "${pwd}/get-pip.py" https://bootstrap.pypa.io/get-pip.py
        do_progress_quiet "Installing pip" \
          sudo -H python "${pwd}/get-pip.py"
        do_progress_quiet "Cleaning up after pip installation" \
          rm "${pwd}/get-pip.py"
        # Rehash so that pip is available
        try pyenv rehash
      fi

      # Install virtualenv
      # If macOS then check that the pyenv virtualenv is installed.
      # If not running macOS then check that some virtualenv is installed.
      if [[ "$(uname -s)" != "Darwin" && ! $(which virtualenv) ]] || [[ "$(uname -s)" = "Darwin" && ! $(pyenv which virtualenv) ]]; then
        do_progress_quiet "Installing Python virtualenv" \
          pip install virtualenv
        # Rehash so that virtualenv is available
        try pyenv rehash
      fi
      # Create a virtualenv
      if [[ ! -d "${virtualenv_dir}" ]]; then
        # shellcheck disable=SC2086
        do_progress_quiet "Setting up a Python virtualenv" \
          ${virtualenv_command} "${virtualenv_dir}"
      fi

      do_progress_quiet "Activating Python virtualenv" \
        source "${virtualenv_dir}/bin/activate"
    else
      _say "${c_yellow}Skipping virtualenv${c_none} because already in one"
    fi
  fi

  # Javascript environment
  # Set up the correct version of node (Travis automatically does this)
  if [[ ! "${CI}" = "true" ]]; then
    # Move from using .nvmrc to .node-version
    if [[ -f "./.nvmrc" ]]; then
      _say "${c_red}DEPRECATED:${c_none} using .nvmrc file but renaming it to be .node-version"
      # move to .node-version and strip the "v" at the beginning of .nvmrc
      nvmrc_contents="$(< ./.nvmrc)"
      echo "${nvmrc_contents#*v}" > ./.node-version
      try rm ./.nvmrc
    fi

    if [[ -f "./.node-version" ]]; then

      # If you have the correct version then skip the nvm check
      version_actual="$(node --version 2> /dev/null)"
      version_required="v$(cat ./.node-version)"

      if [[ -z "${version_actual}" || "${version_actual}" != "${version_required}" ]]; then
        if [[ $(which nodenv) ]]; then
          # Since the versions do not match then nodenv might not have been initialized
          eval "$(nodenv init -)"
          do_progress_quiet "Installing correct version of node" \
            nodenv install "$(< ./.node-version)" --skip-existing
        elif [[ -f "${HOME}/.nvm/nvm.sh" ]]; then
          # DEPRECATE the nvm method once deployments do not use it
          # shellcheck disable=SC1090
          source "${HOME}/.nvm/nvm.sh" --no-use
          do_progress_quiet "${c_red}DEPRECATED:${c_none} Setting correct node version using nvm. Try using https://github.com/nodenv/nodenv instead (add it to Brewfile)" \
            nvm install "v$(< ./.node-version)"
        fi
      fi

      version_actual="$(node --version 2> /dev/null)"
      if [[ "${version_actual}" != "${version_required}" ]]; then
        die "Could not install the correct version of node. Expected '${version_required}' but found '${version_actual}'. Try installing nodenv or nvm. If you installed nodenv then open a new shell"
      fi
    fi
  fi

  # ensure yarn is installed (for installing JS packages)
  if [[ -f "./package.json" ]]; then
    [[ $(which yarn) ]] || die "Install yarn by going to https://yarnpkg.com or adding it to Brewfile (macos)"
  fi

  # Note: Skip rbenv for Travis because it already has ruby
  if [[ ! "${CI}" = "true" ]] && [[ -f ".ruby-version" ]]; then
    if [[ -n $(which rbenv) ]]; then
      if [[ -z "$(rbenv version-name 2>/dev/null)" ]]; then
        do_progress_quiet "Installing Ruby (see ./.ruby-version)" \
          rbenv install --skip-existing
      fi
      do_progress_quiet "Setting correct ruby version (see ./.ruby-version)" \
        eval "$(rbenv init -)"
    else
      _say "WARNING: Skipping rbenv. Using local ruby"
    fi

    if [[ "$(gem list --installed bundler)" == 'false' ]]; then
      do_progress_quiet "Installing Ruby Bundler gem" \
        gem install bundler

      if [[ -n $(which rbenv) ]]; then
        rbenv rehash || die "rbenv rehash failed. could be because another process was rehashing"
      fi
    fi
  fi

  # Trust that subshells will maintain the python/node/ruby version
  declare -x BOOTSTRAP_ALREADY_RAN="true"
fi

# Load anything that is repo-specific
if [[ -f "./script/_bootstrap.sh" ]]; then
  # shellcheck disable=SC1091
 source ./script/_bootstrap.sh || exit 111
fi
